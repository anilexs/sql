--1-- lister toutes les BDD de PHPMyAdmin


--2-- Créer une base de données SQL nommée HARIBO

--3--
/**
* créer une table stagiaire
* qui comporte 3 champs :
* - id_stagiaire => nombre qui s'auto-incrémente, requis et clé primaire
* - prenom => 100 caractères, requis
* - couleur des yeux => 30 caractères, requis
* - genre => homme ou femme, requis
*/

--4--
/**
* insérer dans cette table les informations de votre groupe (faites un copier-coller des lignes ci-dessous) :
*/
INSERT INTO stagiaires (prenom, yeux, genre) VALUES ('Jordan', 'marron','h');

--5--
/**
* créer une table bonbon
* qui comporte 3 champs :
* - id_bonbon => nombre qui s'auto-incrémente, requis et clé primaire
* - nom => 100 caractères, requis
* - saveur => 100 caractères, requis
*/

--6--
/**
* insérer dans cette table des bonbons haribo (faites un copier-coller des lignes ci-dessous) :
*/
INSERT INTO bonbons (nom, saveur) VALUES ('dragibus', 'mûre');
--7--
/**
* créer une table manger
* qui comporte 5 champs :
* - id_manger => nombre qui s'auto-incrémente, requis et clé primaire
* - id_stagiaire => champs de la table stagiaire (la structure de la colonne doit être identique à celle crée dans la table où il est clef primaire, ne pas mettre les paramètres lié à la spécificité clef primaire)
* - id_bonbon => champs de la table bonbon (idem)
* - date_manger => type date, requis
* - quantite => nombre, requis
*/

--8--
/**
* insérer dans la table manger des informations sur qui a consommé quel bonbon, quand et dans quelles quantités (faites un copier-coller des lignes ci-dessous) :
*/
INSERT INTO manger (id_bonbon, id_stagiaire, date_manger, quantite) VALUES (4,7,'2018-09-20', 5);

--9-- Lister les tables de la BDD *haribo*
resulta :

--10-- voir les paramètres de la table *bonbon*
resulta :

--11-- Sélectionner tous les champs de tous les enregistrements de la table *stagiaire*
resulta :

--12-- Rajouter un nouveau stagiaire *Patriiiick* en forçant la numérotation de l'id
resulta :

--13-- Rajouter un nouveau stagiaire *Mila* SANS forcer la numérotation de l'id
resulta :

--14-- Changer le prénom du stagiaire qui a l'id 100 de *Patriiiick* à *Patrick*
resulta :

--15-- Rajouter dans la table manger que Patrick a mangé 5 Tagada purpule le 15 septembre
resulta :

--16-- Sélectionner tous les noms des bonbons
resulta :

--17-- Sélectionner tous les noms des bonbons en enlevant les doublons
resulta :

--18-- Récupérer les couleurs des yeux des stagiaires (Sélectionner plusieurs champs dans une table)
resulta :

--19-- Dédoublonner un résultat sur plusieurs champs
resulta :

--20-- Sélectionner le stagiaire qui a l'id 5
resulta :

--21-- Sélectionner tous les stagiaires qui ont les yeux marrons
resulta :

--22-- Sélectionner tous les stagiaires dont l'id est plus grand que 9
resulta :

--23-- Sélectionner tous les stagiaires SAUF celui dont l'id est 13 (soyons supersticieux !) :!\ il y a 2 façons de faire
resulta :

--24-- Sélectionner tous les stagiaires qui ont un id inférieur ou égal à 10
resulta :

--25-- Sélectionner tous les stagiaires dont l'id est compris entre 7 et 11
resulta :

--26-- Sélectionner les stagiaires dont le prénom commence par un *S*
resulta :

--27-- Trier les stagiaires femmes par id décroissant
resulta :

--28-- Trier les stagiaires hommes par prénom dans l'ordre alphabétique
resulta :

--29-- Trier les stagiaires en affichant les femmes en premier et en classant les couleurs des yeux dans l'ordre alphabétique
resulta :

--30-- Limiter l'affichage d'une requête de sélection de tous les stagiaires aux 3 premires résultats
resulta : SELECT * FROM `stagiaires` LIMIT 3;

--31-- Limiter l'affichage d'une requête de sélection de tous les stagiaires à partir du 3ème résultat et des 5 suivants
resulta : SELECT * FROM `stagiaires` LIMIT 5 OFFSET 2;
ou SELECT * FROM stagiaires LIMIT 2, 5;

--32-- Afficher les 4 premiers stagiaires qui ont les yeux marron
resulta : SELECT * FROM `stagiaires` WHERE yeux = 'marron' LIMIT 4;

--33-- Pareil mais en triant les prénoms dans l'ordre alphabétique
resulta : SELECT * FROM `stagiaires` WHERE yeux = 'marron' ORDER BY prenom LIMIT 4;

--34-- Compter le nombre de stagiaires
resulta : SELECT COUNT(*) FROM `stagiaires`;

--35-- Compter le nombre de stagiaires hommes mais en changeant le nom de la colonne de résultat par *nb_stagiaires_H*
resulta : SELECT COUNT(*) AS nb_stagiaires_H FROM `stagiaires` WHERE genre = 'm';

--36-- Compter le nombre de couleurs d'yeux différentes
resulta : SELECT COUNT(DISTINCT yeux) FROM `stagiaires`;

--37-- Afficher le prénom et les yeux du stagiaire qui a l'id le plus petit
resulta : SELECT prenom, yeux FROM `stagiaires` WHERE id = (SELECT MIN(id) FROM `stagiaires`);

--38-- Afficher le prénom et les yeux du stagiaire qui a l'id le plus grand /!\ c'est une requête imbriquée qu'il faut faire (requête sur le résultat d'une autre requête)
resulta : SELECT prenom, yeux FROM `stagiaires` WHERE id = (SELECT MAX(id) FROM `stagiaires`);

--39-- Afficher les stagiaires qui ont les yeux bleu et vert
resulta : SELECT * FROM `stagiaires` WHERE yeux IN ('bleu', 'vert');  

--40-- A l'inverse maintenant, afficher les stagiaires qui n'ont pas les yeux bleu ni vert
resulta : SELECT * FROM `stagiaires` WHERE yeux NOT IN ('bleu', 'vert');

--41-- récupérer tous les stagiaires qui ont mangé des bonbons, avec le détail de leurs consommations
resulta : SELECT s.*, cb.date_manger, cb.quantite FROM `stagiaires` s LEFT JOIN `candisplay` cb ON s.id = cb.id_stagiaire WHERE cb.id_stagiaire IS NOT NULL;
ou
SELECT * FROM stagiaires LEFT JOIN candisplay ON stagiaires.id = candisplay.id_stagiaire LEFT JOIN bonbons ON bonbons.id  = candisplay.id_bonbon;

--42-- récupérer que les stagiaires qui ont mangé des bonbons, avec le détail de leurs consommations
resulta : SELECT s.*, cd.date_manger, cd.quantite FROM `stagiaires` s JOIN `candisplay` cd ON s.id = cd.id_stagiaire;

--43-- prénom du stagiaire, le nom du bonbon, la date de consommation pour tous les stagiaires qui ont mangé au moins une fois
resulta : SELECT s.*, cb.date_manger, cb.quantite FROM `stagiaires` s JOIN `candisplay` cb ON s.id = cb.id_stagiaire WHERE cb.id_bonbon IS NOT NULL;

--44-- Afficher les quantités consommées par les stagiaires (uniquement ceux qui ont mangé !)
resulta : SELECT s.prenom, cd.quantite FROM `stagiaires` s JOIN `candisplay` cd ON s.id = cd.id_stagiaire;

--45-- Calculer combien de bonbons ont été mangés au total par chaque stagiaire et afficher le nombre de fois où ils ont mangé
resulta : SELECT s.id, s.prenom, COUNT(cd.id_bonbon) AS nombre_de_fois, SUM(cd.quantite) AS total_bonbons_manges FROM `stagiaires` s LEFT JOIN `candisplay` cd ON s.id = cd.id_stagiaire GROUP BY s.id, s.prenom LIMIT 0, 25;

--46-- Afficher combien de bonbons ont été consommés au total
resulta : SELECT SUM(quantite)FROM `candisplay`;

--47-- Afficher le total de *Tagada* consommées
resulta : SELECT SUM(cd.quantite) AS total_tagada_consommes FROM `candisplay` cd JOIN `bonbons` b ON cd.id_bonbon = b.id WHERE b.saveur = 'Tagada';

--48-- Afficher les prénoms des stagiaires qui n'ont rien mangé
resulta : SELECT prenom FROM `stagiaires` WHERE id NOT IN (SELECT DISTINCT id_stagiaire FROM `candisplay`);

--49-- Afficher les saveurs des bonbons (sans doublons)
resulta : SELECT DISTINCT saveur FROM `bonbons`;

--50-- Afficher le prénom du stagiaire qui a mangé le plus de bonbons
resulta : SELECT s.prenom FROM `stagiaires` s JOIN ( SELECT id_stagiaire, SUM(quantite) AS total_bonbons_manges FROM `candisplay` GROUP BY id_stagiaire ORDER BY total_bonbons_manges DESC LIMIT 1 ) AS t ON s.id = t.id_stagiaire;
